import socket
import threading
from IPy import IP

class PortScan():
    # Class variables to store banners and open ports
    banners = []
    open_ports = []

    def __init__(self, target, port_number):
        # Constructor to initialize the target and number of ports
        self.target = target
        self.port_num = port_number

    def scan(self):
        # Method to initiate the port scanning process
        for port in range(1, self.port_num):
            # Create a thread for each port to scan multiple ports concurrently
            thread = threading.Thread(target=self.scan_port, args=[port])
            thread.start()

    def check_ip(self):
        try:
            # Check if the target is a valid IP address
            IP(self.target)
            return self.target
        except ValueError:
            # If not, convert the target to an IP address using DNS lookup
            return socket.gethostbyname(self.target)

    def scan_port(self, port):
        try:
            # Check and obtain the converted IP address
            converted_ip = self.check_ip()

            # Create a socket and set a timeout
            sock = socket.socket()
            sock.settimeout(0.5)

            # Attempt to connect to the target IP and port
            sock.connect((converted_ip, port))
            self.open_ports.append(port)

            try:
                # Attempt to grab the banner from the connected service
                banner = sock.recv(1024).decode().strip('\n').strip('\r')
                # Append the banner to the banners list
                self.banners.append(banner)
                print(f'[+] Open Port {port} : ' + str(self.banners))

            except:
                # If unable to retrieve a banner, append an empty string to the banners list
                self.banners.append(' ')
                print(f'[+] Open Port {port}')

            # Close the connection
            sock.close()

        except:
            # If any exception occurs, ignore and continue
            pass
